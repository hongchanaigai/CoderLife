day006 课程回顾


一. 一维数组

	1. 一维数组的定义和使用
		//1. 数组的定义,和变量定义的区别多了一个[],[]内部放常量
			int a[10];
		//2. 定义数组时,[]内部尽量用常量
			int n = 10;
			int b[n]; //VS编译错误
		//3. 定义数组时,数组名在同一{}内部是唯一的,不能和变量\其他数组名同名
			int a[5]; //error
			int a; //error
		//4. 使用数组时,[]可以是常量\变量\表达式
		
		//定义一个数组,数组名字叫a,有10个元素,每个元素为int
		//通过下标操作元素,从0开始,0~9
			int a[10];
			a[0] = 1;
		
		//数组越界
		//1. 编译时错误,编译代码时就能检查到(语法错误)
		//2. 运行时错误,运行到这个语句才可能检查到(非法操作内存)
		//a[10] = 2;
		
	2. 一维数组初始化
		//定义同时赋值叫初始化,只能在定义时才能通过{}初始化
			int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
			
		//前3个元素初始化,后面的自动填0
			int a1 = {1, 2, 3};
			
		//把每个元素都设置为0
			int a2[10] = {0};
			//int a3[10] = 0; //error
			
		//根据初始化元素个数来确定数组大小
			int a3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
		//如果[]不写大小,必须初始化,否则编译不过
			//int a4[]; //error
			
		//如果一个局部数组,没有初始化,元素的值为随机数
		int b[10];
		//没有b[10]这个元素,一个元素也不能赋值10个值
		//b[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; //error 
		//b = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; //error
		
	3. 一维数组名
		int a[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, 20, 18, 22};
		//1. 数组名是常量,不允许修改的
		a = 10; //error
		
		//数组名是第0个元素(首元素)地址(重要)
		printf("%p, %p\n", a, &a[0]);
		
		//数组大小,sizeof(数组名)
		//10个元素,每一个元素为int,总大小: 10 * 4 = 40
		printf("sizeof(a) = %lu\n", sizeof(a));
		
		//a[0],第0个元素,第0个元素为int
		printf("sizeof(a[0]) = %lu\n", sizeof(a[0]));
		
	4. 冒泡排序
		//冒泡原理:两个挨着元素比较,大于交换,最大值放在最后
		for(i = 0; i < n-1; ++i)
		{
			for(j = 0; j < n-1-i; ++j)
			{
				if(a[j] > a[j+1]) //升序
				{
					tmp = a[j];
					a[j] = a[j+1];
					a[j+1] = tmp;
				}
			}
		}
		
二. 二维数组

	1. 二维数组的定义和使用
		//1. 定义一个一维数组,这个数组有3元素(3行),第一个[]数字代表元素个数
		//2. 每一个元素都是int [4],每个元素都是一维数组
		//3. a[0],a[1],a[2]分别代表第0个元素,第1个元素,第2个元素,它是每一个元素数组名
		//4. 操作二维数组的元素(用户角度),理解为多少行多少列
		int a[3][4];
		
		for(i = 0; i < 3; ++i) //行
		{
			for(j = 0; j < 4; ++j) //列
			{
				a[i][j] = j;
				printf("%d, ", a[i][j]);
			}
			printf("\n");
		}
		
	2. 二维数组初始化
		//用户看方便,写不方便
		int a[3][4] = 
		{
			{1, 2, 3, 4},
			{5, 6, 7, 8},
			{9, 10, 11, 12}
		};
		
		//用一维数组方式初始化
		int a1[3][4] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
		
		//多维数组,如果定义同时初始化,第一个[]的数字可以不写
		int a2[][4] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
		//int a3[][4]; //error,第一个[]不写,必须初始化
		
		int a4[3][4] = {0};
		
	3. 二维数组名
		int a[4][5];
		
		//数组名为首元素地址,a[0]
		printf("%p, %p\n", a, a[0]);
		
		//1. 测二维数组长度sizeof(a),4个元素,每一个int[5] = 4 * 4 * 5 = 80
		printf("sizeof(a) = %lu\n", sizeof(a));
		
		//2. 测第0个元素的大小,它是一维数组,int [5] = 4 * 5 = 20
		printf("sizeof(a[0]) = %lu\n", sizeof(a[0]));
		
		//3. 第0行第0列元素大小,就是一个int类型,4
		printf("sizeof(a[0][0]) = %lu\n", sizeof(a[0][0]));
		
		//4. 求行的数目,第一个[]数目,元素个数
		int n = sizeof(a) / sizeof(a[0]);
		printf("n1 = %d\n", n);
		
		//5. 求列的数目,第二个[]数目
		int n = sizeof(a[0]) / sizeof(a[0][0]);
		printf("n2 = %d\n", n);
		
		//6. 求行 * 列的总数
		int n = sizeof(a) / sizeof(a[0][0]);
		printf("n3 = %d\n", n);
		
三. 多维数组
	int a[3][4] = 
	{
		{1, 2, 3, 4},
		{5, 6, 7, 8},
		{9, 10, 11, 12}
	};
	
	//三维数组就是有n个二维数组
	//所谓的n维数组就是有n个n-1维数组
	int a[2][3][4] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
	
	for(i = 0; i < 2; ++i)
	{
		for(j = 0; j < 3; ++j)
		{
			for(k = 0; k < 4; ++k)
			{
				//a[i][j][k]
			}
		}
	}

四. 字符数组

	1. 字符串和字符数组关系
		//1. 字符串是以数字0或字符'\0'结尾
		//2. 如果字符数组,以数字0或者字符'\0'结尾,那么这个字符数组就是字符串
		char ch = 0;
		printf("ch1 = %d\n", ch);
		
		ch = '\0'; //十进制转义字符
		printf("ch2 = %d\n", ch);
		
		ch = '0'; //字符0,它是普通字符,不是字符串结束字符,ASCII码为48
		printf("ch3 = %d\n", ch);
		
	2. 字符数组初始化
		char buf1[] = {'c', ' ', 'p', 'r', 'o', 'g'};
		//%s代表以字符串方式打印
		//首地址,找字符串的结束符,遇到数字0或字符'\0'结束打印
		printf("buf1 = %s\n", buf1); //有可能乱码
		
		char buf2[] = {'a', 'b', 'c', '\0'};
		printf("buf2 = %s\n", buf2); //只打印abc
		
		char buf3[] = {'a', '\0', 'b', 'c', '\0'};
		printf("buf3 = %s\n", buf3); //只打印a
		
		//1. 使用字符串给字符数组初始化,这种方式只能在定义时使用
		//2. 它有6个字节那么大,隐藏了一个结束符
		char buf4[] = "hello";
		
		//char buf5[100];
		//buf5 = "hello"; //数组名是常量,不允许修改的
		
		char buf6[100] = "hello";
		
		char str[] = "\0abc";
		printf("str = %s\n", str); //没有打印内容
		
		char str1[] = "\012abc"; //'\012'是八进制转义字符
		printf("str1 = %s\n", str1);
		
	3. 字符数组输入
		char str[100];
		scanf("%s", str); //遇到空格截断

五. 随机数的产生
	//随机种子设置,只需设置一次,如果种子一样,随机数就一样
	//srand(100);
	//srand((unsigned int)time(NULL));
	
	int i;
	int tmp;
	for(i = 0; i < 10; ++i)
	{
		tmp = rand(); //产生随机数
		printf("tmp = %d\n", tmp);
	}


六. 作业讲解
	1. 得到随机四位数
		%100
		rand() % 10000
		
		int a1, b1, c1, d1;
		1234随机数
		a1 = 1;
		b1 = 2;
		c1 = 3;
		d1 = 4;
		
		int a2, b2, c2, d2;
		6666键盘输入的数
		a2 = 6;
		b2 = 6;
		c2 = 6;
		d2 = 6;


		int rand_num[4];
		1234随机数
		
		int guess_num[4];
		6666键盘输入的数



day007 课堂记录

char buf[100] = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
scanf("%s", buf);

键盘:hello回车
char buf[100] = "hello\0aaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
printf("buf = %s\n", buf); //hello
printf("buf[5] = %d\n", buf[5]); //0



char src[100] = "cbnsikafhlkllfhkshciuwhcbjsnkhlfjq";
char dst[10];
strcpy(dst, src);



//比较每一个字符的ASCII
abc
abcd
abcd > abc

abc
Abcd
abc > Abcd


程序比作公司,函数比作部门

1. 函数的定义,把之前写在main内部的代码换个地方
2. 函数的定义,类似于厨房做好菜,如果没有人点菜,做好菜没有意义
	函数的定义,只有在用户调用了,才起作用,函数调用类似于点菜
	
	
	
1. 无参无返回值函数的使用
2. 有参无返回值函数的使用
3. 无参有返回值函数的使用
4. 有参有返回值函数的使用



















