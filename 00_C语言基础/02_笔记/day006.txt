day005课程回顾

一. 类型转换

	1. 隐式转换
		double a;
		int b = 1;
		//编译器自动转换,把b转换为double类型后,再给a赋值(隐式转换)
		a = b;
		printf("%lf\n", b);
	
	2. 强制类型转换:	(类型)变量名
		int a = 10;
		//a只有在此语句执行时,才强制转换为double类型,其他地址还是为int类型
		printf("%lf\n", (double)a);
	
		转换原则:占用内存字节数少(值域小)的类型,向占用内存字节数多(值域大)的类型转换,以保证精度不降低
	
	3. 浮点型和整型打印问题
		1) 不要直接通过%d,打印一个浮点型变量,得不到想要的结果,要想得到结果,强制类型转换
			double a = 11.11;
			printf("%d\n", (int)a);
	
		2) 不要直接通过%f或%lf,打印一个整型变量,得不到想要的结果,要想得到结果,强制类型转换
			int a = 10;
			printf("%lf\n", (double)a);


二. 运算符和表达式

	1. 相除得到小数问题
		1) 两个整数相除,只是取整数,不会带小数
			int a = 1 / 2;	//a = 0
		
		2) 要想得到小数的结果,分子分母至少有一个是小数
			double a;
			a = 1 / 2;	//a = 0.5
			a = 1 / (double)2;
			
	2. 前置++	后置++的区别
		int b, c;
		b = 1;
		c = 0;
		c = b++;	//后置++,先用后加
		printf("c = %d, b = %d\n", c, b);	//c = 1, b = 2
		
		b = 1;
		c = 0;
		c = ++b;	//前置++,先加后用
		printf("c1 = %d, b1 = %d\n", c, b);	//c1 = 2, b1 = 2

		区别下面的情况:
			int b = 1;
			++b;	//必须执行完此语句,才往后执行,所以b已经+1了,这里前置和后置没区别
			int c = b;
			printf("c = %d\n", b);
			
	3. 条件真假问题
		1) 0就是假
		2) 非0就是真,通常以1表示
		
	4. 逻辑与 或的短路原则
		&&,左边为假,右边不执行
		||,左边为真,右边不执行
		
	5. 运算符优先级
		int c = 0;
		//&&优先级比 = 高
		//1. 0 && c 结果为假,0
		//2. 0 = 1(常量不能修改)
		0 && c = 1;	//error
		
		
三. 程序流程结构
	C语言支持最基本的三种程序运行结构:顺序结构,选择结构,循环结构
	
	1. 选择结构
		1) if语句
		
			if()
			{
			
			}
			
			
			if()
			{
			
			}
			else
			{
			
			}
			
			
			if()
			{
			
			}
			else if()
			{
			
			}
			else
			{
			
			}
			
		2) 三目运算符?:
			c = a > b ? a : b;
			
		3) switch语句
		
			switch()
			{
			case 1:
				break;
			
			case 2:
				break;
				
			default:
				break;
			}
	
	2. 循环结构
		1) while语句
			while()
			{
			
			}
		
		2) do while语句
			do
			{
			
			}while();
			
		3) for语句
			for( ; ; )
			{
			
			}
		
		4) 死循环
			while(1)
			{
			
			}
			
			
			do
			{
			
			}while(1);
			
			
			for(;;)
			{
			
			}
			
		5) 循环嵌套
			任意循环都可以互相嵌套
			
		6) 跳转语句
			break:
				跳出当前的switch语句
				跳出当前的循环语句,跳出整个循环
				
			continue:
				只能用于循环语句,跳出本次循环,下一次继续执行
			
			goto:
				不是循环语句专属,无条件跳转,不建议滥用




day006课堂记录


153得到各个位上的数字
		153 / 100 取整得到1
	
		(153 % 100) 取余得到53
		53 / 10 取整得到5
		(153 % 100) / 10 = 5

		153 % 10 取余得到3



1. 编译器不是我们想象中那么智能,有些错误不能立马呈现

错误:
	1) 编译错误(语法出错)
	2) 运行时错误(运行时异常),最头疼,有些错误不能立马呈现



定义一个数组,有10个元素,分别赋值为1~10,顺便打印每个元素的值


{}内部的变量或数组,不初始化,它的值为随机数

gcc hello.c -o hello
gcc -o hello hello.c -std=c99


int a = 10;
int b = 20;
int c = 30;
求最大值



char a[] = {'a', 'b', 'c'};	//只有3个字符
char a[] = "abc";	//有4个字符

char a[10] = "123456789";	//最多只能写9个字符,留一个位置放结束符



sizeof()测数据类型大小,不会因为结束符提前结束

char a[] = {'a', '\0', 'b', 'c'};	//有4个字符
sizeof(a) = 4




char a[100];
scanf("%s", a);	//a没有&,原因数组名是首元素地址,本来就是地址

printf("a = %s\n", a);




猜字游戏(在Linux平台下编写):
	1. 随机函数(产生四个0-9之间的数字,不是产生一个四位数)
		1) srand( (unsigned int)time(NULL) );	以当前时间为准,设置随机种子
			注意:此函数,在每次开始游戏后调用一次即可
		2)rand();
			注意:rand()函数,每调用一次,产生一个随机数字
			
		以上所需头文件:
			#include <stdlib.h>	//srand(), rand()
			#include <time.h>	//time()
			
	2. 比较算法
	
Windows:
	#include <windows.h>
	Sleep();	//以毫秒为单位
	
Linux:
	#include <unistd.h>
	sleep();	//以秒为单位

